This is just a file of random thoughts, TODO items, ideas, and documentation for how some
things work within ScarletDME.  Because like all programmers, I'm a lazy jerk and will refer to
ScarletDME as simply, Scarlet.  Ya'll know what I'm talking about anyway. :)

--------------------------------------------------------
[14Jan22] gwb
With regard to the SH/SH1 problem, does it occur on systems that do have 32 bit libraries installed?
--

References to "HSM" or "hsm" refer to the Hot Spot Monitor.  Further research needed to find out what
a "hot spot" actually IS.  The code that does the hot spot monitoring lives in object.c
--

When a user session of ScarleDME is started, a shared memory segment is built and "pcode" is pre-loaded.
This loading happens in qm.c - see the notes around the load_pcode() function and it's call.

The "pcode" file appears to be a binary blob that contains 66 separate object blocks that correspond to
these keywords:

AK       DELLIST     GETLIST  INPUT    KEYEDIT  OCONV     PRFILE   REPSUB    SUMALL  VOC_CAT
BANNER   EXTENDLIST  GETMSG   INPUTAT  LOGIN    OCONVS    READLST  REPSUBST  SYSTEM  VOC_REF
BINDKEY  FILTER      HF       ITYPE    MAXIMUM  OJOIN     READV    SAVELST   TCONV   WRITEV
BREAK    FMTS        ICONV    JNLSEQ   MESSAGE  OVERLAY   REPADD   SSELCT    TRANS
CCONV    FOLD        ICONVS   JNLXCHK  MINIMUM  PCLSTART  REPCAT   SUBST     TTYGET
CHAIN    FORMCSV     IN       KEY      MSGARGS  PICKMSG   REPDIV   SUBSTRN   TTYSET
DATA     FORMLST     INDICES  KEYCODE  NEXTPTR  PREFIX    REPMUL   SUM       VAULT

Out of the 66 objects in the pcode file, these 58 are loaded at the start of a session:

AK       DELLIST     GETLIST  INPUT    KEYEDIT  OCONV     PRFILE   REPSUB    SUMALL  VOC_CAT
BANNER   EXTENDLIST  GETMSG   INPUTAT  LOGIN              READLST  REPSUBST  SYSTEM  VOC_REF
BINDKEY              HF       ITYPE    MAXIMUM  OJOIN     READV    SAVELST   TCONV   WRITEV
BREAK                ICONV             MESSAGE  OVERLAY   REPADD   SSELCT    TRANS
CCONV    FOLD                          MINIMUM  PCLSTART  REPCAT   SUBST     TTYGET
CHAIN    FORMCSV     IN                MSGARGS  PICKMSG   REPDIV   SUBSTRN   TTYSET
DATA     FORMLST     INDICES  KEYCODE  NEXTPTR  PREFIX    REPMUL   SUM       VAULT

These remaining objects are not loaded as part of the pcode load that happens in qm.c.  

*FILTER  FMTS        ICONVS   *JNLSEQ  *JNLXCHK *KEY      OCONVS   *VAULT

The source code for these binary objects appears to be in the GPL.BP file, prefixed with an 
underscore (_) character.  There are three files in the GPL.BP file that begin with an 
underscore that are not referenced by pcode.h: _FMTS, _ICONVS, and _OCONVS.

In a small test, FMTS() appears to work as documented, even though it doesn't appear in the 
global catalog, nor is it pre-loaded with the other pcode objects at the start of a user session.  
It may be dynamically loaded, but I'm not sure at this time.

The objects noted above with an asterisk (*) do not appear to have any corresponding source code.

I suspect that the FILTER, JNLSEQ, JNLXCHK, KEY, and VAULT objects relate to functionality that 
was stripped from the original open source release of OpenQM.  I strongly suspect that the KEY
and VAULT items relate directly to the encryption functionality that was stripped from the OpenQM 
code base prior to the open source release.  I suspect the motivation behind this was the use of
a 3rd party, commercial encryption library.  The way encryption worked is documented fairly well
from the user's standpoint, so I don't see re-creating the functionality as being an insurmountable
hurdle.

The directory ScarletDME/pcode_files includes the individual object files as well as an associated
text file for each that is a dump of the OBJECT_HEADER data.  This data was generated by a new 
routine in qm.c called dump_pcode_file().  This routine is executed if DEBUG has been defined when 
compiling the system.  Decompiling those mystery functions could prove to be educational.

I don't have the entirety of the pcode file's format worked out yet - the file itself is 29,743 bytes
and I can only account for 29,665 of them.  There's 83 bytes in there doing something, but I'm 
not sure what. :)
--

Look into handling the user & group creation as part of the makefile's install target.  It should include
some kind of flashy notice to the user that they need to add themselves to the qmusers group if they've
not done so already.

